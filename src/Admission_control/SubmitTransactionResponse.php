<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: admission_control.proto

namespace Admission_control;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The response for transaction submission.
 * How does a client know if their transaction was included?
 * A response from the transaction submission only means that the transaction
 * was successfully added to mempool, but not that it is guaranteed to be
 * included in the chain.  Each transaction should include an expiration time in
 * the signed transaction.  Let's call this T0.  As a client, I submit my
 * transaction to a validator. I now need to poll for the transaction I
 * submitted.  I can use the query that takes my account and sequence number. If
 * I receive back that the transaction is completed, I will verify the proofs to
 * ensure that this is the transaction I expected.  If I receive a response that
 * my transaction is not yet completed, I must check the latest timestamp in the
 * ledgerInfo that I receive back from the query.  If this time is greater than
 * T0, I can be certain that my transaction will never be included.  If this
 * time is less than T0, I need to continue polling.
 *
 * Generated from protobuf message <code>admission_control.SubmitTransactionResponse</code>
 */
class SubmitTransactionResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * Public key(id) of the validator that processed this transaction
     *
     * Generated from protobuf field <code>bytes validator_id = 4;</code>
     */
    private $validator_id = '';
    protected $status;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Types\VMStatus $vm_status
     *     @type int $ac_status
     *     @type int $mempool_status
     *     @type string $validator_id
     *           Public key(id) of the validator that processed this transaction
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\AdmissionControl::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.types.VMStatus vm_status = 1;</code>
     * @return \Types\VMStatus
     */
    public function getVmStatus()
    {
        return $this->readOneof(1);
    }

    /**
     * Generated from protobuf field <code>.types.VMStatus vm_status = 1;</code>
     * @param \Types\VMStatus $var
     * @return $this
     */
    public function setVmStatus($var)
    {
        GPBUtil::checkMessage($var, \Types\VMStatus::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.admission_control.AdmissionControlStatus ac_status = 2;</code>
     * @return int
     */
    public function getAcStatus()
    {
        return $this->readOneof(2);
    }

    /**
     * Generated from protobuf field <code>.admission_control.AdmissionControlStatus ac_status = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setAcStatus($var)
    {
        GPBUtil::checkEnum($var, \Admission_control\AdmissionControlStatus::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.mempool.MempoolAddTransactionStatus mempool_status = 3;</code>
     * @return int
     */
    public function getMempoolStatus()
    {
        return $this->readOneof(3);
    }

    /**
     * Generated from protobuf field <code>.mempool.MempoolAddTransactionStatus mempool_status = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setMempoolStatus($var)
    {
        GPBUtil::checkEnum($var, \Mempool\MempoolAddTransactionStatus::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Public key(id) of the validator that processed this transaction
     *
     * Generated from protobuf field <code>bytes validator_id = 4;</code>
     * @return string
     */
    public function getValidatorId()
    {
        return $this->validator_id;
    }

    /**
     * Public key(id) of the validator that processed this transaction
     *
     * Generated from protobuf field <code>bytes validator_id = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setValidatorId($var)
    {
        GPBUtil::checkString($var, False);
        $this->validator_id = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getStatus()
    {
        return $this->whichOneof("status");
    }

}

