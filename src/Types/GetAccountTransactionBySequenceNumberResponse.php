<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: get_with_proof.proto

namespace Types;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Transaction information for transactions requested by
 * GetAccountTransactionsRequest
 *
 * Generated from protobuf message <code>types.GetAccountTransactionBySequenceNumberResponse</code>
 */
class GetAccountTransactionBySequenceNumberResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * When the transaction requested is committed, return the committed
     * transaction with proof.
     *
     * Generated from protobuf field <code>.types.SignedTransactionWithProof signed_transaction_with_proof = 2;</code>
     */
    private $signed_transaction_with_proof = null;
    /**
     * When the transaction requested is not committed, we give a proof that
     * shows the current sequence number is smaller than what would have been if
     * the transaction was committed.
     *
     * Generated from protobuf field <code>.types.AccountStateWithProof proof_of_current_sequence_number = 3;</code>
     */
    private $proof_of_current_sequence_number = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Types\SignedTransactionWithProof $signed_transaction_with_proof
     *           When the transaction requested is committed, return the committed
     *           transaction with proof.
     *     @type \Types\AccountStateWithProof $proof_of_current_sequence_number
     *           When the transaction requested is not committed, we give a proof that
     *           shows the current sequence number is smaller than what would have been if
     *           the transaction was committed.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\GetWithProof::initOnce();
        parent::__construct($data);
    }

    /**
     * When the transaction requested is committed, return the committed
     * transaction with proof.
     *
     * Generated from protobuf field <code>.types.SignedTransactionWithProof signed_transaction_with_proof = 2;</code>
     * @return \Types\SignedTransactionWithProof
     */
    public function getSignedTransactionWithProof()
    {
        return $this->signed_transaction_with_proof;
    }

    /**
     * When the transaction requested is committed, return the committed
     * transaction with proof.
     *
     * Generated from protobuf field <code>.types.SignedTransactionWithProof signed_transaction_with_proof = 2;</code>
     * @param \Types\SignedTransactionWithProof $var
     * @return $this
     */
    public function setSignedTransactionWithProof($var)
    {
        GPBUtil::checkMessage($var, \Types\SignedTransactionWithProof::class);
        $this->signed_transaction_with_proof = $var;

        return $this;
    }

    /**
     * When the transaction requested is not committed, we give a proof that
     * shows the current sequence number is smaller than what would have been if
     * the transaction was committed.
     *
     * Generated from protobuf field <code>.types.AccountStateWithProof proof_of_current_sequence_number = 3;</code>
     * @return \Types\AccountStateWithProof
     */
    public function getProofOfCurrentSequenceNumber()
    {
        return $this->proof_of_current_sequence_number;
    }

    /**
     * When the transaction requested is not committed, we give a proof that
     * shows the current sequence number is smaller than what would have been if
     * the transaction was committed.
     *
     * Generated from protobuf field <code>.types.AccountStateWithProof proof_of_current_sequence_number = 3;</code>
     * @param \Types\AccountStateWithProof $var
     * @return $this
     */
    public function setProofOfCurrentSequenceNumber($var)
    {
        GPBUtil::checkMessage($var, \Types\AccountStateWithProof::class);
        $this->proof_of_current_sequence_number = $var;

        return $this;
    }

}

