<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: get_with_proof.proto

namespace Types;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Get events that exist on an event access path.  In the current world,
 * a user may specify events that were received, events that were sent, or any
 * event that modifies their account
 *
 * Generated from protobuf message <code>types.GetEventsByEventAccessPathRequest</code>
 */
class GetEventsByEventAccessPathRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.types.AccessPath access_path = 1;</code>
     */
    private $access_path = null;
    /**
     * The sequence number of the event to start with for this query. Use a
     * sequence number of MAX_INT to represent the latest.
     *
     * Generated from protobuf field <code>uint64 start_event_seq_num = 2;</code>
     */
    private $start_event_seq_num = 0;
    /**
     * If ascending is true this query will return up to `limit` events that were
     * emitted after `start_event_seq_num`. Otherwise it will return up to `limit`
     * events before the offset. Both cases are inclusive.
     *
     * Generated from protobuf field <code>bool ascending = 3;</code>
     */
    private $ascending = false;
    /**
     * Limit number of results
     *
     * Generated from protobuf field <code>uint64 limit = 4;</code>
     */
    private $limit = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Types\AccessPath $access_path
     *     @type int|string $start_event_seq_num
     *           The sequence number of the event to start with for this query. Use a
     *           sequence number of MAX_INT to represent the latest.
     *     @type bool $ascending
     *           If ascending is true this query will return up to `limit` events that were
     *           emitted after `start_event_seq_num`. Otherwise it will return up to `limit`
     *           events before the offset. Both cases are inclusive.
     *     @type int|string $limit
     *           Limit number of results
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\GetWithProof::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.types.AccessPath access_path = 1;</code>
     * @return \Types\AccessPath
     */
    public function getAccessPath()
    {
        return $this->access_path;
    }

    /**
     * Generated from protobuf field <code>.types.AccessPath access_path = 1;</code>
     * @param \Types\AccessPath $var
     * @return $this
     */
    public function setAccessPath($var)
    {
        GPBUtil::checkMessage($var, \Types\AccessPath::class);
        $this->access_path = $var;

        return $this;
    }

    /**
     * The sequence number of the event to start with for this query. Use a
     * sequence number of MAX_INT to represent the latest.
     *
     * Generated from protobuf field <code>uint64 start_event_seq_num = 2;</code>
     * @return int|string
     */
    public function getStartEventSeqNum()
    {
        return $this->start_event_seq_num;
    }

    /**
     * The sequence number of the event to start with for this query. Use a
     * sequence number of MAX_INT to represent the latest.
     *
     * Generated from protobuf field <code>uint64 start_event_seq_num = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStartEventSeqNum($var)
    {
        GPBUtil::checkUint64($var);
        $this->start_event_seq_num = $var;

        return $this;
    }

    /**
     * If ascending is true this query will return up to `limit` events that were
     * emitted after `start_event_seq_num`. Otherwise it will return up to `limit`
     * events before the offset. Both cases are inclusive.
     *
     * Generated from protobuf field <code>bool ascending = 3;</code>
     * @return bool
     */
    public function getAscending()
    {
        return $this->ascending;
    }

    /**
     * If ascending is true this query will return up to `limit` events that were
     * emitted after `start_event_seq_num`. Otherwise it will return up to `limit`
     * events before the offset. Both cases are inclusive.
     *
     * Generated from protobuf field <code>bool ascending = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setAscending($var)
    {
        GPBUtil::checkBool($var);
        $this->ascending = $var;

        return $this;
    }

    /**
     * Limit number of results
     *
     * Generated from protobuf field <code>uint64 limit = 4;</code>
     * @return int|string
     */
    public function getLimit()
    {
        return $this->limit;
    }

    /**
     * Limit number of results
     *
     * Generated from protobuf field <code>uint64 limit = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setLimit($var)
    {
        GPBUtil::checkUint64($var);
        $this->limit = $var;

        return $this;
    }

}

