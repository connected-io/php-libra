<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: vm_errors.proto

namespace Types\DynamicReferenceError;

use UnexpectedValueException;

/**
 * Protobuf type <code>types.DynamicReferenceError.DynamicReferenceErrorType</code>
 */
class DynamicReferenceErrorType
{
    /**
     * Generated from protobuf enum <code>UnknownDynamicReferenceError = 0;</code>
     */
    const UnknownDynamicReferenceError = 0;
    /**
     * Generated from protobuf enum <code>MoveOfBorrowedResource = 1;</code>
     */
    const MoveOfBorrowedResource = 1;
    /**
     * Generated from protobuf enum <code>GlobalRefAlreadyReleased = 2;</code>
     */
    const GlobalRefAlreadyReleased = 2;
    /**
     * Generated from protobuf enum <code>MissingReleaseRef = 3;</code>
     */
    const MissingReleaseRef = 3;
    /**
     * Fill with with more later
     *
     * Generated from protobuf enum <code>GlobalAlreadyBorrowed = 4;</code>
     */
    const GlobalAlreadyBorrowed = 4;

    private static $valueToName = [
        self::UnknownDynamicReferenceError => 'UnknownDynamicReferenceError',
        self::MoveOfBorrowedResource => 'MoveOfBorrowedResource',
        self::GlobalRefAlreadyReleased => 'GlobalRefAlreadyReleased',
        self::MissingReleaseRef => 'MissingReleaseRef',
        self::GlobalAlreadyBorrowed => 'GlobalAlreadyBorrowed',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(DynamicReferenceErrorType::class, \Types\DynamicReferenceError_DynamicReferenceErrorType::class);

